import Head from "next/head"
import {getTvByID} from "../../helpers/tvApiCalls"
import ActionBlock from "../../components/utils/ActionBlock"
import {useEffect, useState} from "react"
import SeasonSlider from "../../components/utils/SeasonSlider";
import {shorten, withAuth} from "../../helpers/utilities";
import {getCookieToken} from "../../helpers/authApiCalls";

export async function getServerSideProps({ query, req, res }) {

    const token = getCookieToken(req, res)

    return getTvByID(query.tvID, token).then(hero => {
        if (!hero || hero.error) {
            return {
                notFound: true,
            }
        }
        return {props: {hero}}
    })
}

const tv = ({ hero }) => {

    const [currentSeason, setCurrentSeason] = useState(1)
    const handleChange = (event) => {
        setCurrentSeason(event.target.value)
    }

    useEffect(() => {
        setCurrentSeason(Object.keys(hero.seasons)[0])
    }, [])

    return (
        <div>
            <Head>
                <title>HERA | {hero.name}</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <div id="hero" className="hero" style={{backgroundImage: `url(${hero.background_image})`}}>
                <section/>
                <div className="hero_content">
                    <img className="hero_logo" src={hero.logo} alt="" />
                    <p className="hero_subtitle">
                        {hero.genres && hero.genres[0] && hero.genres.map((genre, index) => (
                            <span key={index} className="subtitle_span">{genre.name}</span>
                        ))}
                        {hero.episode_runtime && <span className="subtitle_span">{hero.episode_runtime}</span>}
                        {hero.rating && <span className="subtitle_span">RATING {hero.rating}</span>}
                    </p>
                    <p className="hero_description">{shorten(hero.description)}</p>

                    {hero.seasons && <select name="season" id="" onChange={handleChange}>
                        {Object.keys(hero.seasons).map((season, index) => (
                            <option key={index} value={season}>SEASON {season}: EPISODES</option>
                        ))}
                    </select>}

                    {hero.seasons[currentSeason] && <SeasonSlider medias={hero.seasons[currentSeason]} />}

                    <ActionBlock type="tv" absolute={true} media={hero}/>
                </div>
            </div>
        </div>
    )
}

export default withAuth(tv)