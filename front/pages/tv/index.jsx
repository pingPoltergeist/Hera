import {useEffect, useState} from "react"
import MediaSlider from "../../components/utils/MediaSlider"
import Head from "next/head"
import ActionBlock from "../../components/utils/ActionBlock";
import {getRandomTv, getTvList} from "../../helpers/tvApiCalls";
import {shorten, withAuth} from "../../helpers/utilities";
import Fallback from "../../components/Fallback";
import {ErrorBoundary} from "react-error-boundary";
import {isAuthenticated} from "../../helpers/authApiCalls";

const Home = () => {

    const [tvs, setTvs] = useState([])
    const [hero, setHero] = useState(null)
    const token = isAuthenticated()

    const preload = () => {
        getRandomTv(token).then(data => {
            if (!data) {
                return
            }
            setHero(data[0])
        })
        getTvList().then((data) => {
            setTvs(data)
        }).catch(err => console.log(err))
    }

    useEffect(()=> {
        preload()
    }, [])

    return (
        <div>
            <Head>
                <title>HERA | COLLECTIONS</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <div id="hero" className="hero" style={hero && hero.background_image ? {backgroundImage: `url(${hero.background_image})`} : {backgroundImage: `url(https://images.unsplash.com/photo-1550684376-efcbd6e3f031?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)`}}>
                <section/>
                {hero && <div className="hero_content">
                    <img className="hero_logo" src={hero.logo} alt=""/>
                    <p className="hero_subtitle">
                        {hero.genres && hero.genres[0] && hero.genres.map((genre, index) => (
                            <span key={index} className="subtitle_span">{genre.name}</span>
                        ))}
                    </p>
                    <p className="hero_description">{shorten(hero.description)}</p>

                    <ActionBlock type="tv" media={hero} videoID={hero.last_watch && hero.last_watch.episode_tmdb_id}/>
                </div>}
            </div>

            <ErrorBoundary FallbackComponent={Fallback}>
                <MediaSlider medias={tvs} type="tv"/>
            </ErrorBoundary>
        </div>
    )
}

export default withAuth(Home)